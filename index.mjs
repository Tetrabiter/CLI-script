#!/usr/bin/env node

import { Command } from "commander";
import shell from "shelljs";
import chalk from "chalk";
import fs from "fs";
import path from "path";

const program = new Command();

program.version("1.0.0").description("CLI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞");

program
  .command("setup <projectName>")
  .description("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç Telegram-–±–æ—Ç–∞")
  .action((projectName) => {
    const projectPath = path.join(process.cwd(), projectName);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
    if (!fs.existsSync(projectPath)) {
      fs.mkdirSync(projectPath, { recursive: true });
      console.log(chalk.green(`üìÅ –ü–∞–ø–∫–∞ ${projectName} —Å–æ–∑–¥–∞–Ω–∞!`));
    } else {
      console.log(chalk.red(`‚ö†Ô∏è –ü–∞–ø–∫–∞ ${projectName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`));
      process.exit(1);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    shell.cd(projectPath);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è npm-–ø—Ä–æ–µ–∫—Ç–∞
    console.log(chalk.blue("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è npm..."));
    shell.exec("npm init -y");

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log(chalk.green("‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã..."));
    shell.exec("npm install telegraf express dotenv axios");
    shell.exec("npm install pg prisma @prisma/client redis bullmq");

    console.log(chalk.green("‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."));
    shell.exec("npm install -D typescript ts-node nodemon @types/node @types/express");

    console.log(chalk.green("‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ..."));
    shell.exec("npm install winston express-winston pino");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    const structure = {
      "src/bot/commands": ["start.ts", "help.ts", "order.ts"],
      "src/bot/middlewares": ["logger.ts", "auth.ts"],
      "src/bot/services": ["payment.ts", "crm.ts"],
      "src/bot": ["bot.ts"],
      "src/database": ["prisma.schema"],
      "src/database/migrations": [],
      "src/server": ["webhooks.ts", "expressApp.ts"],
      "src/utils": ["logger.ts", "config.ts"],
      "src": ["index.ts"],
    };

    Object.entries(structure).forEach(([folder, files]) => {
      const folderPath = path.join(projectPath, folder);
      fs.mkdirSync(folderPath, { recursive: true });
      console.log(chalk.yellow(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folder}`));

      files.forEach((file) => {
        const filePath = path.join(folderPath, file);
        fs.writeFileSync(filePath, ""); // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        console.log(chalk.cyan(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${file}`));
      });
    });

    // –°–æ–∑–¥–∞—ë–º .env, tsconfig.json, README.md
    const otherFiles = ["package.json", ".env", "tsconfig.json", "README.md"];
    otherFiles.forEach((file) => {
      const filePath = path.join(projectPath, file);
      fs.writeFileSync(filePath, "");
      console.log(chalk.cyan(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${file}`));
    });

    console.log(chalk.blue("üéâ –ü—Ä–æ–µ–∫—Ç Telegram-–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üöÄ"));
  });

program.parse(process.argv);
